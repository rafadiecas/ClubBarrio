Index: ClubBarrioApp/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from datetime import timedelta\r\n\r\nfrom django.contrib.auth import authenticate, logout, login\r\nfrom django.contrib.auth.decorators import login_required\r\nfrom django.contrib.auth.hashers import make_password\r\nfrom django.contrib.sites import requests\r\nfrom django.core.files.storage import FileSystemStorage\r\nfrom django.core.mail import EmailMessage\r\nfrom django.db.models import Count, Q, When, Value\r\nfrom django.db.models.functions import Coalesce\r\nfrom django.forms import IntegerField\r\nfrom django.core.exceptions import ObjectDoesNotExist\r\nfrom django.core.mail import EmailMessage, send_mail\r\nfrom django.db.models import Count, Q, Sum\r\nfrom django.shortcuts import render, redirect\r\nfrom django.urls import reverse\r\nfrom django.utils import timezone\r\nfrom django.utils.datetime_safe import datetime, date\r\nimport re\r\nimport requests\r\nfrom collections import defaultdict\r\nfrom .models import *\r\nfrom django.core.paginator import Paginator\r\nfrom django.http import Http404, HttpResponse\r\nfrom django.http import JsonResponse\r\nfrom .decorator import user_required, rol_requerido\r\nfrom django.contrib import messages\r\nfrom django.contrib.auth import update_session_auth_hash\r\nfrom django.db.models import Count, F, ExpressionWrapper, FloatField, Sum, QuerySet\r\nfrom itertools import chain\r\n\r\nfrom .models import Partido\r\nfrom django.conf import settings\r\n\r\nfrom django.db.models import F, Count, Case, When, Value, IntegerField\r\nfrom PIL import Image\r\nimport os\r\nimport secrets\r\nfrom django.urls import reverse\r\nfrom django.contrib.sites.shortcuts import get_current_site\r\n\r\n# Create your views here.\r\n\r\ndef pagina_inicio(request):\r\n    list_noticias = Noticias.objects.all().order_by('-id')\r\n    list_noticias = list_noticias[0:3]\r\n    #mail = EmailMessage('Asunto', 'Cuerpo del mensaje', to=['safaclubbasket@gmail.com'])\r\n    #mail.send()\r\n    return render(request, 'inicio.html', {'noticias': list_noticias})\r\n\r\ndef pagina_tienda(request):\r\n    list_productos = Producto.objects.all()\r\n    page = request.GET.get('page', 1)\r\n    tipo_producto = Tipo.objects.all()\r\n\r\n    try:\r\n        paginator = Paginator(list_productos, 9) # Muestra la cantidad de productor por pagina\r\n        list_productos = paginator.page(page)\r\n    except:\r\n        raise Http404\r\n\r\n    data = {\r\n        'entity': list_productos,\r\n        'tipo_producto': tipo_producto,\r\n        'paginator': paginator\r\n    }\r\n\r\n    return render(request, 'tienda.html', data)\r\n\r\ndef pagina_tienda_filtro(request,id):\r\n    list_productos = Producto.objects.filter(tipo_id=id)\r\n    page = request.GET.get('page', 1)\r\n    tipo_producto = Tipo.objects.all()\r\n\r\n    try:\r\n        paginator = Paginator(list_productos, 9) # Muestra la cantidad de productor por pagina\r\n        list_productos = paginator.page(page)\r\n    except:\r\n        raise Http404\r\n\r\n    data = {\r\n        'entity': list_productos,\r\n        'tipo_producto': tipo_producto,\r\n        'paginator': paginator\r\n    }\r\n\r\n    return render(request, 'tienda.html', data)\r\n\r\ndef pagina_noticias(request):\r\n    list_noticias = Noticias.objects.all().order_by('-id')\r\n    page = request.GET.get('page', 1)\r\n\r\n    try:\r\n        paginator = Paginator(list_noticias, 3)\r\n        list_noticias = paginator.page(page)\r\n    except:\r\n        raise Http404\r\n\r\n    data = {\r\n        'entity': list_noticias,\r\n        'paginator': paginator\r\n    }\r\n\r\n    usuario = request.user\r\n    envio_datos_barra(data, request, usuario)\r\n    return render(request, 'Noticias.html', data)\r\n\r\n\r\ndef envio_datos_barra(data, request, usuario):\r\n    if usuario.is_authenticated:\r\n        if usuario.rol == 'Tutor':\r\n            tutor = TutorLegal.objects.get(usuario_id=usuario.id)\r\n            hijos = Jugador.objects.filter(tutorLegal_id=tutor.id)\r\n            data['hijos'] = hijos\r\n            if len(hijos) == 0:\r\n                data['hijo_existe'] = True\r\n        elif usuario.rol == 'Jugador':\r\n            jugador = Jugador.objects.get(usuario_id=usuario.id)\r\n            data['jugador'] = jugador\r\n        elif usuario.rol == 'Entrenador':\r\n            equipos = equipos_entrenador(request)\r\n            data['equipos_entrenador'] = equipos\r\n\r\n\r\n\r\n\r\ndef pagina_contacto(request):\r\n    usuario = request.user\r\n    if request.method == 'POST':\r\n        nombre = request.POST.get('nombre')\r\n        email = request.POST.get('email')\r\n        asunto = request.POST.get('asunto') + \" - Enviado por: \" + nombre +\"-\"+ email\r\n        mensaje = \"Enviado por: \" + nombre + \"<br><br>\" + \"Email: \" + email + \"<br><br>\"+ \"Mensaje: \" + request.POST.get('mensaje')\r\n        correo = EmailMessage(\r\n            asunto,\r\n            mensaje,\r\n            to=[settings.EMAIL_HOST_USER]\r\n        )\r\n        correo.content_subtype = \"html\"\r\n        correo.send()\r\n        return JsonResponse({'success': 'Mensaje enviado con éxito'})\r\n    return render(request, 'contacto.html')\r\n\r\n\r\n#@user_required\r\n#@rol_requerido('Administrador')\r\ndef administrador(request):\r\n    return render(request, 'administrador.html')\r\n\r\ndef usuarios(request):\r\n    lista_usuarios = User.objects.all()\r\n    return render(request, 'lista_usuarios.html', {'usuarios': lista_usuarios})\r\n\r\ndef validar_contraseña(usuario, contraseña_actual, nueva_contraseña, confirmacion_contraseña):\r\n    errores = []\r\n    if not usuario.check_password(contraseña_actual):\r\n        errores.append(\"La contraseña actual es incorrecta\")\r\n    if nueva_contraseña != confirmacion_contraseña:\r\n        errores.append(\"Las contraseñas no coinciden\")\r\n    largo = re.compile(r'.{8,}')\r\n    digito = re.compile(r'\\d+')\r\n    letra_may = re.compile(r'[A-Z]+')\r\n    letra_min = re.compile(r'[a-z]+')\r\n    validaciones = [largo, digito, letra_may, letra_min]\r\n    for v in validaciones:\r\n        if not v.search(nueva_contraseña):\r\n            errores.append(\r\n                \"La contraseña debe tener al menos 8 caracteres, una letra mayúscula, una minúscula y un número\")\r\n            break\r\n    return errores\r\n\r\ndef perfil(request):\r\n    usuario = User.objects.get(id=request.user.id)\r\n    notificaciones = Notificaciones.objects.get(usuario=usuario)\r\n    roles_map = {\r\n        'Tutor': TutorLegal,\r\n        'Jugador': Jugador,\r\n        'Entrenador': Entrenador\r\n    }\r\n\r\n    usuario = request.user\r\n    data={}\r\n    envio_datos_barra(data,request,usuario)\r\n\r\n    if usuario.rol in roles_map:\r\n        perfil = roles_map[usuario.rol].objects.get(usuario_id=usuario.id)\r\n\r\n        if request.method == 'POST':\r\n            perfil.nombre = request.POST.get('nombre')\r\n            perfil.apellidos = request.POST.get('apellidos')\r\n\r\n            # Manejar la imagen de perfil subida\r\n            profile_image = request.FILES.get('profile_image')\r\n            if profile_image:\r\n                fs = FileSystemStorage(location='media/foto_perfil')\r\n                filename = fs.save(profile_image.name, profile_image)\r\n                usuario.foto = 'foto_perfil/' + filename  # Guarda el nombre del archivo en lugar de la URL\r\n                usuario.save()  # Guarda el objeto User después de actualizar el campo foto\r\n\r\n                # Si la petición es AJAX, devolver una respuesta JSON con la URL de la imagen\r\n                if request.headers.get('x-requested-with') == 'XMLHttpRequest':\r\n                    return JsonResponse({'image_url': usuario.foto.url})\r\n\r\n            perfil.save()\r\n\r\n        if usuario.rol == 'Jugador':\r\n            equipo = perfil.equipo  # Obtén el equipo asociado al perfil si el usuario es un jugador\r\n            jugador = Jugador.objects.get(usuario_id=usuario.id)\r\n            return render(request, 'profile.html', {'perfil': perfil, 'equipo': equipo, 'jugador':jugador, 'notificaciones': notificaciones,\"data\":data, 'usuario': usuario})\r\n\r\n        return render(request, 'profile.html', {'perfil': perfil, 'notificaciones': notificaciones,\"data\":data, 'usuario': usuario})\r\n\r\n    return render(request, 'profile.html', {'notificaciones': notificaciones,\"data\":data, 'usuario': usuario})\r\n\r\ndef perfil_pass(request):\r\n    usuario = request.user\r\n    if request.method == 'POST':\r\n        contraseña_actual = request.POST.get('password_actual')\r\n        nueva_contraseña = request.POST.get('new_password')\r\n        confirmacion_contraseña = request.POST.get('confirmacion_password')\r\n\r\n        errores = validar_contraseña(usuario, contraseña_actual, nueva_contraseña, confirmacion_contraseña)\r\n        if errores:\r\n            return JsonResponse({'errores': errores}, status=400)\r\n\r\n        usuario.password = make_password(nueva_contraseña)\r\n        usuario.save()  # Guarda el usuario después de cambiar la contraseña\r\n        update_session_auth_hash(request, usuario)  # Actualiza la sesión del usuario\r\n        notificaciones = Notificaciones.objects.get(usuario=request.user)\r\n        if notificaciones.password_change:\r\n            send_mail(\r\n                'Cambio de contraseña en ClubBarrioApp',\r\n                'Has cambiado tu contraseña. Si no has realizado este cambio, por favor, contacta con nosotros.',\r\n                'safaclubbasket@gmail.com',\r\n                [request.user.email],\r\n                fail_silently=False,\r\n            )\r\n\r\n        return JsonResponse({'success': 'Contraseña cambiada con éxito'})\r\n\r\n    # Si el método no es POST, redirige al usuario a la página de perfil (o donde quieras)\r\n    return redirect('perfil')\r\n\r\n# @login_required\r\ndef notificaciones(request):\r\n    if request.method == 'POST':\r\n\r\n        notificaciones = Notificaciones.objects.get(usuario=request.user)\r\n\r\n        # Actualiza los campos de notificación basándose en los valores de los checkbox\r\n        notificaciones.password_change = 'passwordChange' in request.POST\r\n        notificaciones.weekly_newsletter = 'weeklyNewsletter' in request.POST\r\n        notificaciones.new_training = 'newTraining' in request.POST\r\n\r\n\r\n        notificaciones.save()\r\n\r\n        return JsonResponse({'success': 'Notificaciones actualizadas con éxito'})\r\n        # return redirect('perfil')\r\n\r\n    # Si el método no es POST, redirige al usuario a la página de perfil (o donde quieras)\r\n    return redirect('perfil')\r\n\r\n\r\n\r\ndef new_user(request):\r\n    Users = User.objects.all()\r\n    Equipos = Equipo.objects.filter(es_safa=True)\r\n    Tutores = TutorLegal.objects.all()\r\n    roles = Role.labels[:-1]\r\n    if request.method == 'GET':\r\n\r\n        return render(request, \"crear_usuario.html\",\r\n                      {'Users': Users, 'Equipos': Equipos, 'Tutores': Tutores, 'roles': roles})\r\n    else:\r\n\r\n        username = request.POST.get('username')\r\n        rol = Role.value_for_label(request.POST.get('rol'))\r\n        email = request.POST.get('email')\r\n        password = request.POST.get('password')\r\n        password2 = request.POST.get('password2')\r\n        fecha_nacimiento = request.POST.get('fecha_nacimiento')\r\n\r\n        errors = filtro(email, fecha_nacimiento,rol, username, password, password2)\r\n\r\n        if len(errors) != 0:\r\n            return render(request, \"crear_usuario.html\",\r\n                          {\"errores\": errors, \"username\": username, \"email\": email, \"roles\": roles,\r\n                           \"fecha_nacimiento\": fecha_nacimiento, \"Equipos\": Equipos, \"Tutores\": Tutores})\r\n        else:\r\n            new = User.objects.create(username=username, password=make_password(password), email=email, rol=rol,\r\n                                      fecha_nacimiento=fecha_nacimiento)\r\n            new.save()\r\n\r\n    if request.POST.get('rol') == 'Tutor':\r\n        new_padre = TutorLegal()\r\n        new_padre.nombre = request.POST.get('nombre')\r\n        new_padre.apellidos = request.POST.get('apellidos')\r\n        new_padre.usuario_id = new.id\r\n        new_padre.save()\r\n\r\n    if request.POST.get('rol') == 'Entrenador':\r\n        new_entrenador = Entrenador()\r\n        new_entrenador.nombre = request.POST.get('nombre')\r\n        new_entrenador.apellidos = request.POST.get('apellidos')\r\n        new_entrenador.usuario_id = new.id\r\n        new_entrenador.save()\r\n\r\n        list_equipos = request.POST.getlist('equipos')\r\n\r\n        for e in list_equipos:\r\n            equipo = Equipo.objects.get(id=e)\r\n            equipo.entrenadores.add(new_entrenador)\r\n\r\n    if request.POST.get('rol') == 'Jugador':\r\n        new_jugador = Jugador()\r\n        new_jugador.nombre = request.POST.get('nombre')\r\n        new_jugador.apellidos = request.POST.get('apellidos')\r\n        new_jugador.usuario_id = new.id\r\n        new_jugador.equipo_id = request.POST.get('equipo')\r\n        new_jugador.tutorLegal_id = request.POST.get('tutor')\r\n        new_jugador.save()\r\n\r\n    return redirect('/ClubBarrioApp/administrador/usuarios/')\r\n\r\n\r\ndef filtro(email, fecha_nacimiento, rol, username, password = \"Contrasena1\", password2 = \"Contrasena1\"):\r\n    errors = []\r\n    if password != password2:\r\n        errors.append(\"Las contraseñas no coinciden\")\r\n    existe_usuario = User.objects.filter(username=username).exists()\r\n    if existe_usuario:\r\n        errors.append(\"Ya existe un usuario con ese nombre\")\r\n    existe_mail = User.objects.filter(email=email).exists()\r\n    if existe_mail:\r\n        errors.append(\"Ya existe un usuario con ese email\")\r\n    fecha = datetime.strptime(fecha_nacimiento, '%Y-%m-%d')\r\n    diferencia = datetime.now() - fecha\r\n    if diferencia.days < 6570 and rol != 'Jugador':\r\n        errors.append(\"El usuario debe ser mayor de edad\")\r\n    largo = re.compile(r'.{8,}')\r\n    digito = re.compile(r'\\d+')\r\n    letra_may = re.compile(r'[A-Z]+')\r\n    letra_min = re.compile(r'[a-z]+')\r\n    validaciones = [largo, digito, letra_may, letra_min]\r\n    for v in validaciones:\r\n        if not v.search(password):\r\n            errors.append(\r\n                \"La contraseña debe tener al menos 8 caracteres, una letra mayúscula, una minúscula y un número\")\r\n            break\r\n    return errors\r\n\r\n\r\ndef elimina_usuario(request, id):\r\n    usuario = User.objects.get(id=id)\r\n    usuario.delete()\r\n    return redirect('usuarios')\r\n\r\ndef registro(request):\r\n    if request.method == 'GET':\r\n        return render(request, 'registro.html')\r\n    else:\r\n        nombre_usuario = request.POST.get('nombre_usuario')\r\n        email = request.POST.get('email')\r\n        contrasenya = request.POST.get('contrasenya')\r\n        repetirContrasenya = request.POST.get('repetirContrasenya')\r\n        fecha_nacimiento = request.POST.get('fecha_nacimiento')\r\n        rol = \"Usuario\"\r\n\r\n        errores = filtro(email, fecha_nacimiento, 'Usuario', nombre_usuario, contrasenya, repetirContrasenya)\r\n\r\n\r\n        if len(errores) != 0:\r\n            return render(request, 'registro.html', {\"errores\": errores, \"nombre_usuraio\": nombre_usuario, \"email\": email, \"fecha_nacimiento\": fecha_nacimiento})\r\n        else:\r\n            usuario = User.objects.create(username=nombre_usuario, password=make_password(contrasenya), email=email,\r\n                                          fecha_nacimiento=fecha_nacimiento, rol=rol)\r\n            usuario.email_verification_token = generate_verification_token()\r\n            usuario.email_verification_token_expiration = datetime.now() + timedelta(hours=24)\r\n            usuario.save()\r\n            send_verification_email(request, usuario)  # Asegúrate de pasar 'request' como primer argumento\r\n\r\n            # Crea un objeto Notificaciones para el nuevo usuario\r\n            notificaciones = Notificaciones.objects.create(id=usuario.id, usuario=usuario, password_change=False,\r\n                                                           weekly_newsletter=False, new_training=False)\r\n            notificaciones.save()\r\n\r\n\r\n            return JsonResponse({'success': 'Usuario registrado con éxito'})\r\n            # return redirect('login')\r\n\r\ndef generate_verification_token():\r\n    return secrets.token_urlsafe(20)\r\n\r\n\r\ndef send_verification_email(request, usuario):\r\n    # Obtén el nombre de dominio actual\r\n    domain = get_current_site(request).domain\r\n\r\n    # Genera la ruta de verificación\r\n    verification_route = reverse('verify_email', args=[usuario.username, usuario.email_verification_token])\r\n\r\n    # Combina el nombre de dominio y la ruta para obtener la URL completa\r\n    verification_url = 'http://' + domain + verification_route\r\n\r\n    message = f'Por favor verifica tu correo electrónico haciendo clic en el siguiente enlace: {verification_url}'\r\n    send_mail('Verifica tu correo electrónico', message, 'safaclubbasket@gmail.com', [usuario.email])\r\nfrom django.contrib import messages\r\n\r\ndef verify_email(request, username, token):\r\n    verification_status = \"\"\r\n    try:\r\n        user = User.objects.get(username=username)\r\n    except User.DoesNotExist:\r\n        verification_status = 'Usuario no encontrado'\r\n        messages.add_message(request, messages.INFO, verification_status)\r\n        return redirect('login')\r\n\r\n    if user.email_verification_token != token:\r\n        user.delete()\r\n        verification_status = 'Token inválido'\r\n        messages.add_message(request, messages.INFO, verification_status)\r\n        return redirect('login')\r\n\r\n    if timezone.now() > user.email_verification_token_expiration:\r\n        user.delete()\r\n        verification_status = 'Token expirado'\r\n        messages.add_message(request, messages.INFO, verification_status)\r\n        return redirect('login')\r\n\r\n    user.email_verified = True\r\n    user.email_verification_token = None\r\n    user.email_verification_token_expiration = None\r\n    user.save()\r\n    mensaje = (\"Bienvenido a SafaClubBasket, \" + user.username + \". Tu registro se ha completado con éxito.\"\r\n               + \"<br><br>\" + \"Tus credenciales de acceso son: \" + \"<br>\"\r\n               + \"Usuario: \" + user.username + \"<br>\" + \"Contraseña: \" + user.password + \"<br><br>\" + \"Un saludo, SafaClubBasket.\")\r\n    correo = EmailMessage('Registro en SafaClubBasket', mensaje, to=[user.email])\r\n    correo.content_subtype = \"html\"\r\n    correo.send()\r\n\r\n    verification_status = 'Correo electrónico verificado con éxito'\r\n    messages.add_message(request, messages.INFO, verification_status)\r\n\r\n    return redirect('login')\r\n\r\ndef logear(request):\r\n    if request.method == 'POST':\r\n        nombre_usuario = request.POST.get('nombre_usuario')\r\n        contrasenya = request.POST.get('contrasenya')\r\n\r\n        user = authenticate(request, username=nombre_usuario, password=contrasenya)\r\n\r\n        if user is not None and user.email_verified == True:\r\n            login(request, user)\r\n\r\n            if user.rol== \"Administrador\":\r\n                return redirect('administrador')\r\n\r\n            elif user.rol == \"Usuario\" or user.rol == \"Tutor\":\r\n                return redirect('usuario')\r\n            elif user.rol == \"Jugador\":\r\n                return redirect('inicio_jugador')\r\n\r\n            elif user.rol == \"Entrenador\":\r\n                return redirect('entrenador')\r\n\r\n            # Redirección tras un login exitoso\r\n            return redirect('inicio')\r\n        else:\r\n            if user is not None and user.email_verified == False:\r\n                return render(request, 'login.html',\r\n                              {\"error\": \"Usuario no verificado, consulte su email o contacte con nosotros\", \"nombre_usuario\": nombre_usuario})\r\n            # Mensaje de error si la autenticación falla\r\n            return render(request, 'login.html',{\"error\": \"Usuario o contraseña incorrectos\", \"nombre_usuario\": nombre_usuario})\r\n\r\n    # Mostrar formulario de login para método GET\r\n    return render(request, 'login.html')\r\n\r\ndef desloguear(request):\r\n    logout(request)\r\n    return redirect('login')\r\n\r\n\r\ndef edita_usuario(request, id):\r\n    usuario = User.objects.get(id=id)\r\n    Equipos = Equipo.objects.all()\r\n    Tutores = TutorLegal.objects.all()\r\n    roles = Role.labels[:-1]\r\n    rol = usuario.rol\r\n\r\n    if request.method == 'GET':\r\n        if usuario.rol == 'Jugador':\r\n            tutor = Jugador.objects.get(usuario_id=id).tutorLegal\r\n            equipo = Jugador.objects.get(usuario_id=id).equipo\r\n            jugador = Jugador.objects.get(usuario_id=id)\r\n            return render(request, 'editar_usuarios.html',\r\n                          {'usuario': usuario, 'Equipos': Equipos, 'Tutores': Tutores, 'roles': roles, 'tutor': tutor,\r\n                           'equipo': equipo, 'datos': jugador})\r\n        if usuario.rol == 'Entrenador':\r\n            id_equipos = []\r\n            total_equipos = Equipo.objects.all()\r\n            for e in total_equipos:\r\n                if e.entrenadores.filter(usuario_id=usuario.id).exists():\r\n                    id_equipos.append(e.id)\r\n            entrenador = Entrenador.objects.filter(usuario_id=usuario.id)\r\n            return render(request, 'editar_usuarios.html',\r\n                          {'usuario': usuario, 'Equipos': Equipos, 'roles': roles, 'id_equipos': id_equipos,\r\n                           'Tutores': Tutores})\r\n        if usuario.rol == 'Tutor':\r\n            tutor = TutorLegal.objects.get(usuario_id=usuario.id)\r\n            tarifas = tarifa.labels\r\n            return render(request, 'editar_usuarios.html',\r\n                          {'usuario': usuario, 'roles': roles, 'datos': tutor, 'Tutores': Tutores, 'Equipos': Equipos, 'tarifas': tarifas})\r\n\r\n        return render(request, 'editar_usuarios.html',\r\n                      {'usuario': usuario, 'roles': roles, 'Tutores': Tutores, 'Equipos': Equipos})\r\n    else:\r\n\r\n        usuario.username = request.POST.get('username')\r\n        usuario.email = request.POST.get('email')\r\n        usuario.fecha_nacimiento = request.POST.get('fecha_nacimiento')\r\n        usuario.save()\r\n\r\n        if usuario.rol == 'Tutor':\r\n            tutor = TutorLegal.objects.get(usuario_id=id)\r\n            tutor.nombre = request.POST.get('nombre')\r\n            tutor.apellidos = request.POST.get('apellidos')\r\n            tutor.tarifa = tarifa.value_for_label(request.POST.get('tarifa'))\r\n            if request.POST.get('is_active') == 'on':\r\n                tutor.es_activo = True\r\n            else:\r\n                tutor.es_activo = False\r\n            tutor.save()\r\n        if usuario.rol == 'Entrenador':\r\n            entrenador = Entrenador.objects.get(usuario_id=id)\r\n            entrenador.nombre = request.POST.get('nombre')\r\n            entrenador.apellidos = request.POST.get('apellidos')\r\n            entrenador.save()\r\n            list_equipos = request.POST.getlist('equipos')\r\n            for e in list_equipos:\r\n                equipo = Equipo.objects.get(id=e)\r\n                equipo.entrenadores.add(entrenador)\r\n        if usuario.rol == 'Jugador':\r\n            jugador = Jugador.objects.get(usuario_id=id)\r\n            jugador.nombre = request.POST.get('nombre')\r\n            jugador.apellidos = request.POST.get('apellidos')\r\n            jugador.equipo_id = request.POST.get('equipo')\r\n            jugador.tutorLegal_id = request.POST.get('tutor')\r\n            if request.POST.get('is_active') == 'on':\r\n                jugador.es_activo = True\r\n            else:\r\n                jugador.es_activo = False\r\n            jugador.save()\r\n\r\n        return redirect('usuarios')\r\ndef equipos_listado(request):\r\n    lista_equipos = Equipo.objects.all()\r\n    return render(request, 'lista_equipos.html', {\"equipos\":lista_equipos})\r\n\r\ndef crear_equipo(request):\r\n    if request.method == 'GET':\r\n        lista_categorias = Categoria.objects.all()\r\n        entrenadores = Entrenador.objects.all()\r\n        return render(request, 'crear_equipo.html', {'lista_categorias': lista_categorias, 'entrenadores': entrenadores})\r\n    else:\r\n        equipo_nuevo= Equipo()\r\n        equipo_nuevo.nombre= request.POST.get('nombre')\r\n        equipo_nuevo.escudo = request.POST.get('escudo')\r\n        if request.POST.get('is_safa') == 'on':\r\n            equipo_nuevo.es_safa = True\r\n        else:\r\n            equipo_nuevo.es_safa = False\r\n        equipo_nuevo.categoria= Categoria.objects.get(id=int(request.POST.get('categoria')))\r\n        equipo_nuevo.save()\r\n\r\n        lista_entrenadores = request.POST.getlist('entrenadores')\r\n        for e in lista_entrenadores:\r\n            equipo_nuevo.entrenadores.add(e)\r\n\r\n        return redirect('equipos')\r\n\r\ndef editar_equipo(request, id):\r\n    equipo = Equipo.objects.get(id=id)\r\n    if request.method == 'GET':\r\n        lista_categorias = Categoria.objects.all()\r\n        entrenadores = Entrenador.objects.all()\r\n        id_entrenadores = equipo.entrenadores.values_list('id', flat=True)\r\n        es_safa = equipo.es_safa\r\n        return render(request, 'crear_equipo.html', {'equipo':equipo, 'id_entrenadores':id_entrenadores, 'lista_categorias': lista_categorias, 'entrenadores': entrenadores, 'es_safa': es_safa, 'modo_edicion': True})\r\n    else:\r\n        equipo.nombre = request.POST.get('nombre')\r\n        equipo.escudo = request.POST.get('escudo')\r\n        equipo.categoria = Categoria.objects.get(id=int(request.POST.get('categoria')))\r\n        if request.POST.get('is_safa') == 'on':\r\n            equipo.es_safa = True\r\n        else:\r\n            equipo.es_safa = False\r\n        equipo.save()\r\n\r\n        lista_entrenadores = request.POST.getlist('entrenadores')\r\n        equipo.entrenadores.clear()\r\n        for e in lista_entrenadores:\r\n            equipo.entrenadores.add(e)\r\n\r\n        return redirect('equipos')\r\n\r\ndef elimina_equipo(request, id):\r\n    equipo = Equipo.objects.get(id=id)\r\n    equipo.delete()\r\n    return redirect('equipos')\r\n\r\ndef entrenamientos_listado(request):\r\n    usuario = request.user\r\n    if usuario.rol == 'Entrenador':\r\n        entrenador = Entrenador.objects.get(usuario_id=usuario.id)\r\n        lista_entrenamientos = Entrenamiento.objects.filter(\r\n            Q(entrenador=entrenador) & Q(equipo__entrenadores=entrenador))\r\n    else:\r\n        lista_entrenamientos = Entrenamiento.objects.all()\r\n\r\n    return render(request, 'lista_entrenamiento.html', {\"lista_entrenamientos\":lista_entrenamientos})\r\n\r\ndef entrenamientos_listado_entrenador(request):\r\n    usuario = request.user\r\n    # entrenador = Entrenador.objects.get(usuario_id=usuario.id)\r\n    equipo = Equipo.objects.get(entrenadores__usuario__id=usuario.id)\r\n    lista_entrenamientos = Entrenamiento.objects.filter(entrenador__equipo__id=equipo.id)\r\n    return render(request, 'lista_entrenamiento.html', {\"lista_entrenamientos\":lista_entrenamientos})\r\ndef crear_entrenamiento(request):\r\n    if request.method == 'GET':\r\n        lista_entrenadores = Entrenador.objects.all()\r\n        lista_lugares_entrenamiento = LugarEntrenamiento.objects.all()\r\n        lista_equipos = Equipo.objects.filter(es_safa=True)\r\n        return render(request, 'crear_entrenamiento.html',\r\n                      {'lista_entrenadores': lista_entrenadores, 'lista_lugares_entrenamiento': lista_lugares_entrenamiento, 'lista_equipos': lista_equipos})\r\n    else:\r\n        entrenamiento_nuevo = Entrenamiento()\r\n        entrenamiento_nuevo.fecha = request.POST.get('fecha')\r\n        entrenamiento_nuevo.hora = request.POST.get('hora')\r\n        entrenamiento_nuevo.entrenador = Entrenador.objects.get(id=int(request.POST.get('entrenador')))\r\n        entrenamiento_nuevo.lugarEntrenamiento = LugarEntrenamiento.objects.get(id=int(request.POST.get('lugarEntrenamiento')))\r\n        entrenamiento_nuevo.equipo = Equipo.objects.get(id=int(request.POST.get('equipo')))\r\n        entrenamiento_nuevo.save()\r\n\r\n        # Obtén todos los jugadores que pertenecen al equipo\r\n        jugadores_equipo = Jugador.objects.filter(equipo=entrenamiento_nuevo.equipo).select_related('usuario')\r\n\r\n        for jugador in jugadores_equipo:\r\n            try:\r\n                notificaciones = Notificaciones.objects.get(usuario=jugador.usuario)\r\n                if notificaciones.new_training:  # Verifica si las notificaciones del jugador están activadas\r\n                    send_mail(\r\n                        'Nuevo entrenamiento en ClubBarrioApp',\r\n                        'Se ha programado un nuevo entrenamiento para tu equipo. Inicia sesión para ver los detalles.',\r\n                        'safaclubbasket@gmail.com',\r\n                        [jugador.usuario.email],\r\n                        fail_silently=False,\r\n                    )\r\n            except Notificaciones.DoesNotExist:\r\n                pass\r\n\r\n            # Obtén el tutor del jugador\r\n            tutor = jugador.tutorLegal\r\n            if tutor is not None:\r\n                try:\r\n                    notificaciones_tutor = Notificaciones.objects.get(usuario=tutor.usuario)\r\n                    if notificaciones_tutor.new_training:  # Verifica si las notificaciones del tutor están activadas\r\n                        send_mail(\r\n                            'Nuevo entrenamiento en ClubBarrioApp',\r\n                            'Se ha programado un nuevo entrenamiento para el equipo de tu hijo/a. Inicia sesión para ver los detalles.',\r\n                            'safaclubbasket@gmail.com',\r\n                            [tutor.usuario.email],\r\n                            fail_silently=False,\r\n                        )\r\n                except Notificaciones.DoesNotExist:\r\n                    pass\r\n\r\n        return redirect('entrenamientos_listado')\r\ndef editar_entrenamiento(request, id):\r\n    entrenamiento = Entrenamiento.objects.get(id=id)\r\n    if request.method == 'GET':\r\n        lista_entrenadores = Entrenador.objects.all()\r\n        lista_lugares_entrenamiento = LugarEntrenamiento.objects.all()\r\n        lista_equipos = Equipo.objects.filter(es_safa=True)\r\n        return render(request, 'crear_entrenamiento.html',\r\n                      {'entrenamiento': entrenamiento, 'lista_entrenadores': lista_entrenadores, 'lista_lugares_entrenamiento': lista_lugares_entrenamiento, 'modo_edicion': True,'lista_equipos': lista_equipos})\r\n    else:\r\n        entrenamiento.fecha = request.POST.get('fecha')\r\n        entrenamiento.hora = request.POST.get('hora')\r\n        entrenamiento.entrenador = Entrenador.objects.get(id=int(request.POST.get('entrenador')))\r\n        entrenamiento.lugarEntrenamiento = LugarEntrenamiento.objects.get(id=int(request.POST.get('lugarEntrenamiento')))\r\n        entrenamiento.equipo = Equipo.objects.get(id=int(request.POST.get('equipo')))\r\n        entrenamiento.save()\r\n\r\n        return redirect('entrenamientos_listado')\r\n\r\ndef elimina_entrenamiento(request, id):\r\n    entrenamiento = Entrenamiento.objects.get(id=id)\r\n    entrenamiento.delete()\r\n    if request.user.rol == 'Entrenador':\r\n        return redirect('entrenador')\r\n    else:\r\n        return redirect('entrenamientos_listado')\r\n\r\n\r\n\r\n\r\ndef lista_noticias(request):\r\n    lista_noticias = Noticias.objects.all()\r\n    return render(request, 'lista_noticias.html', {\"noticias\":lista_noticias})\r\n\r\ndef crear_noticia(request):\r\n    if request.method == 'GET':\r\n        return render(request, 'crear_noticias.html')\r\n    else:\r\n        noticia_nueva = Noticias()\r\n        noticia_nueva.titulo = request.POST.get('titulo')\r\n        noticia_nueva.articulo = request.POST.get('articulo')\r\n        noticia_nueva.url_imagen = request.POST.get('url_imagen')\r\n        noticia_nueva.administrador_id = 1\r\n        noticia_nueva.save()\r\n\r\n        # Obtén todos los usuarios que tienen habilitado el check de noticias\r\n        usuarios_con_noticias = Notificaciones.objects.filter(weekly_newsletter=True).select_related('usuario')\r\n\r\n        for notificacion in usuarios_con_noticias:\r\n            try:\r\n                if notificacion.new_training:  # Verifica si las notificaciones del usuario están activadas\r\n                    send_mail(\r\n                        'Nueva noticia en ClubBarrioApp',\r\n                        'Se ha publicado una nueva noticia. Inicia sesión para verla.',\r\n                        'safaclubbasket@gmail.com',\r\n                        [notificacion.usuario.email],\r\n                        fail_silently=False,\r\n                    )\r\n            except Notificaciones.DoesNotExist:\r\n                pass\r\n\r\n        return redirect('noticias_admin')\r\n\r\ndef elimina_noticia(request, id):\r\n    noticia = Noticias.objects.get(id=id)\r\n    noticia.delete()\r\n    return redirect('noticias_admin')\r\n\r\ndef editar_noticia(request,id):\r\n    noticia = Noticias.objects.get(id=id)\r\n    if request.method == 'GET':\r\n        return render(request, 'crear_noticias.html', {'noticia':noticia, 'modo_edicion': True})\r\n    else:\r\n        noticia.titulo = request.POST.get('titulo')\r\n        noticia.articulo = request.POST.get('articulo')\r\n        noticia.url_imagen = request.POST.get('url_imagen')\r\n        noticia.save()\r\n        return redirect('noticias_admin')\r\n\r\ndef estadisticas_jugador_listado(request):\r\n    lista_estadisticas_jugador = EstadisticasJugador.objects.all()\r\n    return render(request, 'lista_estadisticas_jugador.html', {\"lista_estadisticas_jugador\":lista_estadisticas_jugador})\r\ndef crear_estadisticas_jugador(request):\r\n    if request.method == 'GET':\r\n        lista_partidos = Partido.objects.filter(Q(equipo1__es_safa=True) | Q(equipo2__es_safa=True)).order_by('-fecha')\r\n        lista_jugador = Jugador.objects.all()\r\n        return render(request, 'crear_estadisticas_jugador.html',\r\n                      {'lista_partidos': lista_partidos, 'lista_jugador': lista_jugador})\r\n    else:\r\n        estadisticas_jugador_nuevo = EstadisticasJugador()\r\n        estadisticas_jugador_nuevo.puntos = request.POST.get('puntos')\r\n        estadisticas_jugador_nuevo.minutos = request.POST.get('minutos')\r\n        estadisticas_jugador_nuevo.rebotes = request.POST.get('rebotes')\r\n        estadisticas_jugador_nuevo.faltas = request.POST.get('minutos')\r\n        estadisticas_jugador_nuevo.asistencias = request.POST.get('asistencias')\r\n        estadisticas_jugador_nuevo.jugador = Jugador.objects.get(id=int(request.POST.get('jugadores')))\r\n        estadisticas_jugador_nuevo.partido = Partido.objects.get(id=int(request.POST.get('partido')))\r\n        estadisticas_jugador_nuevo.save()\r\n\r\n        return redirect('estadisticas_jugador_listado')\r\ndef editar_estadisticas_jugador(request, id):\r\n    estadisticas_jugador = EstadisticasJugador.objects.get(id=id)\r\n    if request.method == 'GET':\r\n        lista_entrenadores = Entrenador.objects.all()\r\n        lista_partidos = Partido.objects.all()\r\n        return render(request, 'crear_estadisticas_jugador.html',\r\n                      {'estadisticas_jugador': estadisticas_jugador, 'lista_entrenadores': lista_entrenadores, 'lista_partidos': lista_partidos, 'modo_edicion': True})\r\n    else:\r\n        estadisticas_jugador.puntos = request.POST.get('puntos')\r\n        estadisticas_jugador.minutos = request.POST.get('minutos')\r\n        estadisticas_jugador.rebotes = request.POST.get('rebotes')\r\n        estadisticas_jugador.faltas = request.POST.get('minutos')\r\n        estadisticas_jugador.asistencias = request.POST.get('asistencias')\r\n        estadisticas_jugador.partido = Partido.objects.get(id=int(request.POST.get('partido')))\r\n        estadisticas_jugador.save()\r\n\r\n        return redirect('estadisticas_jugador_listado')\r\n\r\ndef elimina_estadisticas_jugador(request, id):\r\n    estadistica_jugador = EstadisticasJugador.objects.get(id=id)\r\n    estadistica_jugador.delete()\r\n    return redirect('estadistica_jugador_listado')\r\ndef partidos_listado(request):\r\n    lista_partidos = Partido.objects.all()\r\n    return render(request, 'lista_partidos.html', {\"lista_partidos\":lista_partidos})\r\n\r\ndef crear_partido(request):\r\n    if request.method == 'GET':\r\n        lista_equipos = Equipo.objects.all()\r\n        temporadas = Temporada.objects.all()\r\n        return render(request, 'crear_partidos.html', {'lista_equipos': lista_equipos, 'temporadas': temporadas})\r\n    else:\r\n        partido_nuevo = Partido()\r\n        partido_nuevo.fecha = request.POST.get('fecha')\r\n        partido_nuevo.hora = request.POST.get('hora')\r\n        partido_nuevo.lugar = request.POST.get('lugar')\r\n        partido_nuevo.puntos_equipo1 = request.POST.get('puntos_equipo1')\r\n        partido_nuevo.puntos_equipo2 = request.POST.get('puntos_equipo2')\r\n        partido_nuevo.equipo1 = Equipo.objects.get(id=int(request.POST.get('equipo_local')))\r\n        partido_nuevo.equipo2 = Equipo.objects.get(id=int(request.POST.get('equipo_visitante')))\r\n        partido_nuevo.temporada = Temporada.objects.get(id=int(request.POST.get('temporada')))\r\n        partido_nuevo.jornada = request.POST.get('jornada')\r\n        if request.POST.get('equipo_local') == request.POST.get('equipo_visitante'):\r\n            errores = [\"Los equipos no pueden ser iguales\"]\r\n            return render(request, 'crear_partidos.html', {'errores': errores, 'lista_equipos': Equipo.objects.all(), 'temporadas': Temporada.objects.all()})\r\n        else:\r\n            partido_nuevo.save()\r\n            return redirect('partidos_listado')\r\n\r\ndef elimina_partido(request, id):\r\n    partido = Partido.objects.get(id=id)\r\n    partido.delete()\r\n    return redirect('partidos_listado')\r\n\r\ndef editar_partido(request, id):\r\n    partido = Partido.objects.get(id=id)\r\n    if request.method == 'GET':\r\n        lista_equipos = Equipo.objects.all()\r\n        temporadas = Temporada.objects.all()\r\n        return render(request, 'crear_partidos.html', {'partido': partido, 'lista_equipos': lista_equipos, 'temporadas': temporadas, 'modo_edicion': True})\r\n    else:\r\n        partido.fecha = request.POST.get('fecha')\r\n        partido.hora = request.POST.get('hora')\r\n        partido.lugar = request.POST.get('lugar')\r\n        partido.puntos_equipo1 = request.POST.get('puntos_equipo1')\r\n        partido.puntos_equipo2 = request.POST.get('puntos_equipo2')\r\n        partido.equipo1 = Equipo.objects.get(id=int(request.POST.get('equipo_local')))\r\n        partido.equipo2 = Equipo.objects.get(id=int(request.POST.get('equipo_visitante')))\r\n        partido.temporada = Temporada.objects.get(id=int(request.POST.get('temporada')))\r\n        partido.jornada = request.POST.get('jornada')\r\n        if request.POST.get('equipo_local') == request.POST.get('equipo_visitante'):\r\n            errores = [\"Los equipos no pueden ser iguales\"]\r\n            return render(request, 'crear_partidos.html', {'errores': errores, 'lista_equipos': Equipo.objects.all(), 'temporadas': Temporada.objects.all()})\r\n        else:\r\n            partido.save()\r\n            return redirect('partidos_listado')\r\n\r\n\r\ndef lista_tienda(request):\r\n    lista_productos = ProductoTalla.objects.all()\r\n    return render(request, 'lista_productos.html', {\"lista_productos\":lista_productos})\r\n\r\ndef crear_producto(request):\r\n    if request.method == 'GET':\r\n        tallas = Talla.objects.all()\r\n        tipos = Tipo.objects.all()\r\n        return render(request, 'crear_productos.html', {'tallas': tallas, 'tipos': tipos})\r\n    else:\r\n        producto_nuevo = Producto()\r\n        producto_nuevo.nombre = request.POST.get('nombre')\r\n        producto_nuevo.precio = request.POST.get('precio')\r\n        producto_nuevo.tipo = Tipo.objects.get(id=int(request.POST.get('tipo')))\r\n        producto_nuevo.url_imagen = request.POST.get('url_imagen')\r\n        producto_nuevo.descripcion = request.POST.get('descripcion')\r\n        producto_nuevo.save()\r\n        producto_talla_nuevo = ProductoTalla()\r\n        producto_talla_nuevo.producto = producto_nuevo\r\n        producto_talla_nuevo.talla = Talla.objects.get(id=int(request.POST.get('talla')))\r\n        producto_talla_nuevo.stock = request.POST.get('stock')\r\n        producto_talla_nuevo.save()\r\n        return redirect('lista_tienda')\r\n\r\ndef crear_producto_talla(request):\r\n    if request.method == 'GET':\r\n        tallas = Talla.objects.all()\r\n        productos = Producto.objects.all()\r\n        return render(request, 'crear_talla.html', {'tallas': tallas, 'productos': productos})\r\n    else:\r\n        try:\r\n            producto_talla = ProductoTalla.objects.get(producto_id=int(request.POST.get('producto')), talla=request.POST.get('talla'))\r\n            errores = []\r\n            errores.append(\"Ya existe ese producto con esa talla\")\r\n            return render(request, 'crear_talla.html', {'errores': errores, 'tallas': Talla.objects.all(), 'productos': Producto.objects.all()})\r\n        except ObjectDoesNotExist:\r\n            productoTalla_nuevo = ProductoTalla()\r\n            productoTalla_nuevo.producto = Producto.objects.get(id=int(request.POST.get('producto')))\r\n            productoTalla_nuevo.talla = Talla.objects.get(id=int(request.POST.get('talla')))\r\n            productoTalla_nuevo.stock = request.POST.get('stock')\r\n            productoTalla_nuevo.save()\r\n            return redirect('lista_tienda')\r\n\r\ndef elimina_producto(request, id):\r\n    producto = Producto.objects.get(id=id)\r\n    producto.delete()\r\n    return redirect('lista_tienda')\r\n\r\ndef edita_producto(request, id):\r\n    productotalla = ProductoTalla.objects.get(id=id)\r\n    producto = productotalla.producto\r\n    if request.method == 'GET':\r\n        tallas = Talla.objects.all()\r\n        tipos = Tipo.objects.all()\r\n        return render(request, 'crear_productos.html', {'producto': producto, 'tallas': tallas, 'tipos': tipos, 'modo_edicion': True, 'productotalla': productotalla})\r\n    else:\r\n        tallas = Talla.objects.all()\r\n        tipos = Tipo.objects.all()\r\n        producto.nombre = request.POST.get('nombre')\r\n        producto.precio = float(request.POST.get('precio'))\r\n        producto.tipo = Tipo.objects.get(id=int(request.POST.get('tipo')))\r\n        producto.url_imagen = request.POST.get('url_imagen')\r\n        producto.save()\r\n        new_talla = Talla.objects.get(id=int(request.POST.get('talla')))\r\n        if productotalla.talla == new_talla:\r\n            productotalla.stock = request.POST.get('stock')\r\n            productotalla.save()\r\n        else:\r\n            try:\r\n                producto_talla = ProductoTalla.objects.get(producto_id=producto.id, talla=new_talla)\r\n                errores = []\r\n                errores.append(\"Ya existe ese producto con esa talla\")\r\n                return render(request, 'crear_productos.html', {'producto': producto, 'tallas': tallas, 'tipos': tipos, 'modo_edicion': True, 'productotalla': productotalla, 'errores': errores})\r\n            except ObjectDoesNotExist:\r\n                productotalla.talla = new_talla\r\n                productotalla.stock = request.POST.get('stock')\r\n                productotalla.save()\r\n\r\n        return redirect('lista_tienda')\r\n\r\n\r\ndef pagina_usuario(request):\r\n    list_noticias = Noticias.objects.all().order_by('-id')\r\n    list_noticias = list_noticias[0:3]\r\n    list_partidos = Partido.objects.all()\r\n    usuario = request.user\r\n    equipos_por_categoria = {}\r\n\r\n    for equipo in Equipo.objects.all():\r\n        if equipo.es_safa:\r\n            plazas_libres = 20 - Jugador.objects.filter(equipo_id=equipo.id).count()\r\n            if plazas_libres > 0:\r\n                equipo_info = {'equipo': equipo, 'plazas_libres': plazas_libres}\r\n                categoria_equipo = equipo.categoria.tipo\r\n                if categoria_equipo in equipos_por_categoria:\r\n                    equipos_por_categoria[categoria_equipo].append(equipo_info)\r\n                else:\r\n                    equipos_por_categoria[categoria_equipo] = [equipo_info]\r\n\r\n    if usuario.rol == 'Tutor':\r\n        tutor = TutorLegal.objects.get(usuario_id=usuario.id)\r\n        hijos = Jugador.objects.filter(tutorLegal_id=tutor.id)\r\n        list_partidos =[]\r\n        for hijo in hijos:\r\n            partidos = Partido.objects.filter(Q(equipo1=hijo.equipo) | Q(equipo2=hijo.equipo))\r\n            for partido in partidos:\r\n                if partido not in list_partidos:\r\n                    list_partidos.append(partido)\r\n        if len(hijos) == 0:\r\n            return render(request, 'inicio_usuario_tutor.html', {'noticias': list_noticias, 'partidos': list_partidos, 'hijo_existe': True, 'equipos_por_categoria': equipos_por_categoria})\r\n        return render(request, 'inicio_usuario_tutor.html', {'noticias': list_noticias, 'partidos': list_partidos, 'hijos': hijos, 'equipos_por_categoria': equipos_por_categoria})\r\n    else:\r\n\r\n\r\n        return render(request, 'inicio_usuario_tutor.html', {'noticias': list_noticias, 'partidos': list_partidos, 'equipos_por_categoria': equipos_por_categoria})\r\n\r\ndef tarifas(request):\r\n    return render(request, 'tarifas.html')\r\n\r\ndef inscripciones(request):\r\n    if request.method == 'GET':\r\n        return render(request, 'inscripcion_tarifa.html')\r\n    else:\r\n        datos_inscripcion = {'nombre': request.POST.get('nombre'), 'apellidos': request.POST.get('apellidos'),'tarifa': request.POST.get('tarifa_seleccionada')}\r\n        request.session[\"datos_inscripccion\"] = datos_inscripcion\r\n        #usuario = request.user\r\n        #usuario.rol = 'Tutor'\r\n        #usuario.save()\r\n        #tutor = TutorLegal()\r\n        #tutor.usuario = usuario\r\n        #tutor.nombre = request.POST.get('nombre')\r\n        #tutor.apellidos = request.POST.get('apellidos')\r\n        #tutor.tarifa = request.POST.get('tarifa_seleccionada')\r\n        #tutor.save()\r\n\r\n\r\n        #mensaje = (\"Gracias por suscribirte, \" + usuario.username + \". Tu suscripción se ha completado con éxito.\"\r\n                   #+ \"<br><br>\" + \"Algunos datos importantes: \" + \"<br>\"\r\n                   #+ \"Tarifa selecionada: \" + tutor.tarifa + \"<br>\" + \"Pagos los dias \" + str(datetime.now().day)+ \" de cada mes.\" + \"<br><br>\" + \"Un saludo, SafaClubBasket.\")\r\n        #correo = EmailMessage('Suscripción en SafaClubBasket', mensaje, to=[usuario.email])\r\n        #correo.content_subtype = \"html\"\r\n        #correo.send()\r\n\r\n        return render(request, 'pago_inscripcion.html')\r\ndef pago_inscripcion(request):\r\n\r\n    if request.method == 'POST':\r\n\r\n        datos_inscripcion = request.session[\"datos_inscripccion\"]\r\n        usuario = request.user\r\n        usuario.rol = 'Tutor'\r\n        usuario.save()\r\n        tutor = TutorLegal()\r\n        tutor.usuario = usuario\r\n        tutor.nombre = datos_inscripcion['nombre']\r\n        tutor.apellidos = datos_inscripcion['apellidos']\r\n        tutor.tarifa = datos_inscripcion['tarifa']\r\n        tutor.save()\r\n\r\n        mensaje = (\"Gracias por suscribirte, \" + usuario.username + \". Tu suscripción se ha completado con éxito.\"\r\n                   + \"<br><br>\" + \"Algunos datos importantes: \" + \"<br>\"\r\n                   + \"Tarifa selecionada: \" + tutor.tarifa + \"<br>\" + \"Pagos los dias \" + str(datetime.now().day)+ \" de cada mes.\" + \"<br><br>\" + \"Un saludo, SafaClubBasket.\")\r\n        correo = EmailMessage('Suscripción en SafaClubBasket', mensaje, to=[usuario.email])\r\n        correo.content_subtype = \"html\"\r\n        correo.send()\r\n        return redirect('usuario')\r\ndef terminos_y_servicios(request):\r\n    return render(request, 'terminos_y_servicios.html')\r\n\r\ndef lista_hijos(request):\r\n    usuario = request.user\r\n    tutor = TutorLegal.objects.get(usuario_id=usuario.id)\r\n    hijos = Jugador.objects.filter(tutorLegal_id=tutor.id)\r\n    if len(hijos) == 0:\r\n        return render(request, 'lista_hijos.html', {'hijo_existe': True})\r\n    return render(request, 'lista_hijos.html', {'hijos': hijos})\r\n\r\ndef crea_hijos(request):\r\n    usuario = request.user\r\n    tutor = TutorLegal.objects.get(usuario_id=usuario.id)\r\n    hijos = Jugador.objects.filter(tutorLegal_id=tutor.id)\r\n    hijo = User()\r\n    jugador = Jugador()\r\n    if request.method == 'GET':\r\n        return render(request, 'crear_hijo.html', {'modo_edicion': False})\r\n    else:\r\n\r\n\r\n        if 'boton' in request.POST and request.POST['boton'] == 'seleccion_datos':\r\n\r\n            username = request.POST.get('username')\r\n            rol = 'Jugador'\r\n            email = request.POST.get('email')\r\n            password = request.POST.get('password')\r\n            password2 = request.POST.get('password2')\r\n            fecha_nacimiento = request.POST.get('fecha_nacimiento')\r\n            fecha = datetime.strptime(fecha_nacimiento, '%Y-%m-%d')\r\n            diferencia = datetime.now() - fecha\r\n            lista_equipos=[]\r\n            nombre = request.POST.get('nombre')\r\n            apellidos = request.POST.get('apellidos')\r\n            errors = filtro(email, fecha_nacimiento, rol, username, password, password2)\r\n\r\n            if(len(errors) == 0):\r\n                datos= {'username': username, 'rol': rol, 'email': email, 'password': password, 'fecha_nacimiento': fecha_nacimiento, 'nombre': nombre, 'apellidos': apellidos}\r\n                request.session['datos'] = datos\r\n\r\n\r\n            categoria = calculador_categoria(diferencia, errors)\r\n\r\n            if (tutor.tarifa == 'BASE' and len(hijos) >= 1) or (tutor.tarifa == 'PLUS' and len(hijos) >= 3) or (\r\n                    tutor.tarifa == 'PREMIUM' and len(hijos) >= 5):\r\n                errors.append(\"No puedes añadir más hijos\")\r\n\r\n            filtro_equipos_plaza(categoria, errors, lista_equipos)\r\n\r\n            if len(errors) != 0:\r\n                return render(request, 'crear_hijo.html',\r\n                              {'equipos': lista_equipos, 'edicion_equipo': False, 'fecha_nacimiento': fecha_nacimiento,\r\n                               'password': password, 'email': email, 'username': username, 'errores': errors,\r\n                               'hijos': hijos, 'nombre': nombre, 'apellidos': apellidos})\r\n\r\n\r\n\r\n            return render(request, 'crear_hijo.html', {'equipos': lista_equipos, 'edicion_equipo': True, 'nombre': nombre, 'apellidos': apellidos, 'hijo': hijo})\r\n\r\n        datos= request.session['datos']\r\n        hijo.username= datos['username']\r\n        hijo.email = datos['email']\r\n        hijo.fecha_nacimiento = datos['fecha_nacimiento']\r\n        hijo.rol = datos['rol']\r\n        hijo.password = make_password(datos['password'])\r\n        hijo.save()\r\n        jugador.usuario = User.objects.get(id=hijo.id)\r\n        jugador.nombre = datos['nombre']\r\n        jugador.apellidos = datos['apellidos']\r\n        jugador.tutorLegal = tutor\r\n        jugador.equipo = Equipo.objects.get(id=int(request.POST.get('equipo_seleccionado')))\r\n        jugador.save()\r\n        return redirect('gestion_familia')\r\n\r\n\r\ndef filtro_equipos_plaza(categoria, errors, lista_equipos):\r\n    # plazas_libres = 20 - Jugador.objects.filter(equipo_id=equipo.id).count()\r\n    # equipos = Equipo.objects.filter(categoria=categoria)\r\n\r\n    for equipo in Equipo.objects.all():\r\n        if categoria == equipo.categoria.tipo and equipo.es_safa:\r\n            plazas_libres = 20 - Jugador.objects.filter(equipo_id=equipo.id).count()\r\n            if plazas_libres > 0:\r\n                dict = {'equipo': equipo, 'plazas_libres': plazas_libres}\r\n                lista_equipos.append(dict)\r\n    if len(lista_equipos) == 0:\r\n        errors.append(\"No hay plazas disponibles en ningún equipo\")\r\n\r\n\r\ndef elimina_hijo(request, id):\r\n    hijo = Jugador.objects.get(id=id)\r\n    usuario_id = hijo.usuario_id\r\n    usuario = User.objects.get(id=usuario_id)\r\n    usuario.delete()\r\n\r\n    return redirect('gestion_familia')\r\n\r\ndef edita_hijo(request, id):\r\n    jugador = Jugador.objects.get(id=id)\r\n    equipos = Equipo.objects.all()\r\n    fecha_nacimiento = jugador.usuario.fecha_nacimiento\r\n    errors = []\r\n    if request.method == 'GET':\r\n        return render(request, 'crear_hijo.html', {'jugador': jugador, 'equipos': equipos,'modo_edicion': True, 'fecha_nacimiento': fecha_nacimiento})\r\n    else:\r\n        if 'boton' in request.POST and request.POST['boton'] == 'seleccion_datos':\r\n\r\n            jugador.nombre = (request.POST.get('nombre'))\r\n            jugador.apellidos = request.POST.get('apellidos')\r\n            jugador.usuario.fecha_nacimiento = request.POST.get('fecha_nacimiento')\r\n            diferencia = datetime.now() - datetime.strptime(request.POST.get('fecha_nacimiento'), '%Y-%m-%d')\r\n            lista_equipos = []\r\n\r\n            categoria = calculador_categoria(diferencia, errors)\r\n\r\n            filtro_equipos_plaza(categoria, errors, lista_equipos)\r\n\r\n            if len(errors) != 0:\r\n                return render(request, 'crear_hijo.html', {'jugador': jugador,'modo_edicion': True, 'fecha_nacimiento': fecha_nacimiento,'errores': errors, 'edicion_equipo': False})\r\n\r\n            jugador.save()\r\n\r\n\r\n            return render(request, 'crear_hijo.html',\r\n                          {'equipos': lista_equipos, 'edicion_equipo': True,'jugador': jugador})\r\n\r\n        jugador.equipo = Equipo.objects.get(id=int(request.POST.get('tarifa_seleccionada')))\r\n        jugador.save()\r\n        return redirect('gestion_familia')\r\n\r\n\r\ndef calculador_categoria(diferencia, errors):\r\n    categoria = \"\"\r\n    if diferencia.days <= 1825:\r\n        categoria =\"\"\r\n    elif diferencia.days < 2555:\r\n        categoria = 'PreBenjamin'\r\n    elif diferencia.days < 3285:\r\n        categoria = 'Benjamin'\r\n    elif diferencia.days < 4015:\r\n        categoria = 'Alevin'\r\n    elif diferencia.days < 4745:\r\n        categoria = 'Infantil'\r\n    elif diferencia.days < 5475:\r\n        categoria = 'Cadete'\r\n    elif diferencia.days < 6575:\r\n        categoria = 'Juvenil'\r\n    else:\r\n        errors.append(\"El jugador debe ser menor de 18 años y mayor de 5\")\r\n    return categoria\r\n\r\n\r\ndef inicio_jugador(request, id=None):\r\n    list_noticias = Noticias.objects.all().order_by('-id')\r\n    list_noticias = list_noticias[0:3]\r\n    hijos=[]\r\n    usuario = request.user\r\n    if usuario.rol == 'Jugador':\r\n        jugador = Jugador.objects.get(usuario_id=usuario.id)\r\n    else:\r\n        tutor = TutorLegal.objects.get(usuario_id=usuario.id)\r\n        hijos = Jugador.objects.filter(tutorLegal_id=tutor.id)\r\n        jugador = Jugador.objects.get(usuario_id=id)\r\n\r\n    equipos = Equipo.objects.filter(categoria_id=jugador.equipo.categoria)\r\n\r\n    clasificacion = saca_clasificacion(equipos)\r\n\r\n    fecha_actual = date.today()\r\n\r\n    equipo3 = Equipo.objects.get(id=jugador.equipo.id)\r\n    partidos_futuros = Partido.objects.filter(\r\n        Q(equipo1_id=equipo3.id) | Q(equipo2_id=equipo3.id), fecha__gte=fecha_actual).order_by('fecha')\r\n\r\n    entrenamientos = Entrenamiento.objects.filter(equipo=equipo3, fecha__gte=fecha_actual).order_by('fecha')\r\n\r\n    response = requests.get(f\"https://nominatim.openstreetmap.org/search?q={partidos_futuros[0].lugar}&format=json\")\r\n    if response.status_code != 200:\r\n        list_partidos = Partido.objects.filter(Q(equipo1_id=equipo3.id) | Q(equipo2_id=equipo3.id))\r\n        return render(request, 'inicio_jugador.html', {'noticias': list_noticias, 'jugador': jugador, 'equipos': equipos, 'clasificacion': clasificacion, 'hijos': hijos, 'partidos':list_partidos,'mapa_fallo': True,'siguiente_partido': partidos_futuros[0], 'entrenamiento': entrenamientos.first()})\r\n    data = response.json()\r\n    lat = data[0]['lat']\r\n    lon = data[0]['lon']\r\n\r\n    primer_entrenamiento = None\r\n    if entrenamientos.exists():\r\n        primer_entrenamiento = entrenamientos.first()\r\n\r\n    list_partidos = Partido.objects.filter(Q(equipo1_id= equipo3.id)| Q(equipo2_id= equipo3.id))\r\n    return render(request, 'inicio_jugador.html', {'noticias': list_noticias, 'jugador': jugador, 'equipos': equipos, 'clasificacion': clasificacion, 'hijos': hijos, 'partidos':list_partidos,'siguiente_partido': partidos_futuros[0], 'lat': lat, 'lon': lon, 'entrenamiento': primer_entrenamiento,'mapa_fallo': False})\r\n\r\n\r\ndef saca_clasificacion(equipos):\r\n    clasificacion = list()\r\n    for e in equipos:\r\n        partidos_equipo1 = Partido.objects.filter(equipo1_id=e.id)\r\n        partidos_equipo2 = Partido.objects.filter(equipo2_id=e.id)\r\n\r\n        partidos_ganados_equipo1 = partidos_equipo1.filter(puntos_equipo1__gt=F('puntos_equipo2'))\r\n        partidos_ganados_equipo2 = partidos_equipo2.filter(puntos_equipo2__gt=F('puntos_equipo1'))\r\n        total_partidos_ganados = partidos_ganados_equipo1.count() + partidos_ganados_equipo2.count()\r\n\r\n        total_partidos_jugados = partidos_equipo1.count() + partidos_equipo2.count()\r\n\r\n        total_anotados_equipo1 = partidos_equipo1.aggregate(total_anotados=Sum('puntos_equipo1'))['total_anotados'] or 0\r\n        total_anotados_equipo2 = partidos_equipo2.aggregate(total_anotados=Sum('puntos_equipo2'))['total_anotados'] or 0\r\n        total_recibidos_equipo1 = partidos_equipo1.aggregate(total_recibidos=Sum('puntos_equipo2'))['total_recibidos'] or 0\r\n        total_recibidos_equipo2 = partidos_equipo2.aggregate(total_recibidos=Sum('puntos_equipo1'))['total_recibidos'] or 0\r\n        diferencia_puntos = (total_anotados_equipo1 + total_anotados_equipo2) - (total_recibidos_equipo1 + total_recibidos_equipo2)\r\n        datos_equipo = {\r\n            'ganados': total_partidos_ganados,\r\n            'jugados': total_partidos_jugados,\r\n            'diferencia_puntos': diferencia_puntos,\r\n            'nombre': e.nombre,\r\n        }\r\n        clasificacion.append(datos_equipo)\r\n    clasificacion.sort(key=lambda x: ((x['ganados']), x['diferencia_puntos']), reverse=True)\r\n    return clasificacion\r\n\r\n\r\ndef estadisticas_jugador(request, id):\r\n    usuario = request.user\r\n    hijos=[]\r\n    list_noticias = Noticias.objects.all().order_by('-id')\r\n    list_noticias = list_noticias[0:3]\r\n    if usuario.rol == 'Tutor':\r\n        tutor = TutorLegal.objects.get(usuario_id=usuario.id)\r\n        hijos = Jugador.objects.filter(tutorLegal_id=tutor.id)\r\n    jugador = Jugador.objects.get(id=id)\r\n    estadisticas_jugador = EstadisticasJugador.objects.filter(jugador=jugador)\r\n\r\n    return render(request, 'estadisticas_jugador.html', {'estadisticas_jugador': estadisticas_jugador, 'hijos': hijos ,'jugador': jugador, 'list_noticias': list_noticias})\r\n\r\n\r\ndef terminos_y_servicios(request):\r\n    return render(request, 'terminos_y_servicios.html')\r\n\r\ndef entrenador(request, id = None):\r\n    usuario = request.user\r\n    vista = True\r\n    if request.method == 'GET':\r\n        equipos = Equipo.objects.filter(entrenadores__usuario_id=usuario.id)\r\n        lugares_entrenamiento = LugarEntrenamiento.objects.all()\r\n        entrenador = Entrenador.objects.get(usuario_id=usuario.id)\r\n        lista_entrenamientos = Entrenamiento.objects.filter(entrenador__equipo__id=entrenador.id, fecha__gte=date.today()).order_by('fecha')\r\n        data = {'equipos_entrenador': equipos, 'lista_entrenamientos': lista_entrenamientos,\r\n                'lugares_entrenamiento': lugares_entrenamiento, 'vista': vista}\r\n        if id != None:\r\n            entrenamiento = Entrenamiento.objects.get(id=id)\r\n            data['entrenamiento']= entrenamiento\r\n            data['vista'] = False\r\n        return render(request, 'entrenador.html', data)\r\n\r\n    else:\r\n        if id != None:\r\n            entrenamiento = Entrenamiento.objects.get(id=id)\r\n            entrenamiento.fecha = request.POST.get('fecha')\r\n            entrenamiento.hora = request.POST.get('hora')\r\n            entrenamiento.entrenador = Entrenador.objects.get(usuario_id=usuario.id)\r\n            entrenamiento.equipo = Equipo.objects.get(id=int(request.POST.get('equipo')))\r\n            entrenamiento.lugarEntrenamiento = LugarEntrenamiento.objects.get(id=int(request.POST.get('lugar')))\r\n            entrenamiento.save()\r\n        else:\r\n            entrenamiento_nuevo = Entrenamiento()\r\n            entrenamiento_nuevo.fecha = request.POST.get('fecha')\r\n            entrenamiento_nuevo.hora = request.POST.get('hora')\r\n            entrenamiento_nuevo.entrenador = Entrenador.objects.get(usuario_id=usuario.id)\r\n            entrenamiento_nuevo.lugarEntrenamiento = LugarEntrenamiento.objects.get(id=int(request.POST.get('lugar')))\r\n            entrenamiento_nuevo.equipo = Equipo.objects.get(id=int(request.POST.get('equipo')))\r\n            entrenamiento_nuevo.save()\r\n        return redirect('entrenador')\r\ndef pagina_equipo(request, id):\r\n    equipos = equipos_entrenador(request)\r\n    equipo = Equipo.objects.get(id=id)\r\n    fecha_actual = date.today()\r\n    partidos_anteriores = Partido.objects.filter(\r\n        Q(equipo1_id=id) | Q(equipo2_id=id), fecha__lt=fecha_actual).order_by('-fecha')\r\n    partidos_futuros = Partido.objects.filter(\r\n        Q(equipo1_id=id) | Q(equipo2_id=id), fecha__gte=fecha_actual).order_by('fecha')\r\n    jugadores = Jugador.objects.filter(equipo_id=id)\r\n    equipos_cat= Equipo.objects.filter(categoria=equipo.categoria)\r\n    entrenador= Entrenador.objects.get(usuario_id=request.user.id)\r\n    entrenamientos= Entrenamiento.objects.filter(entrenador_id=entrenador.id, fecha__gte=fecha_actual).order_by('fecha')\r\n    clasificacion= saca_clasificacion(equipos_cat)\r\n    response = requests.get(f\"https://nominatim.openstreetmap.org/search?q={partidos_futuros[0].lugar}&format=json\")\r\n    if response.status_code != 200:\r\n        return render(request, 'equipo.html', {'equipo': equipo, 'partidos_anteriores':partidos_anteriores[:3], 'jugadores': jugadores, 'partidos_futuros': partidos_futuros[1:4],'clasificacion': clasificacion,'siguiente_partido': partidos_futuros[0],'equipos_entrenador': equipos, 'entrenamiento': entrenamientos.first(), 'mapa_fallo': True, 'modo_equipo':True})\r\n    data = response.json()\r\n    print(response.content)\r\n    lat = data[0]['lat']\r\n    lon = data[0]['lon']\r\n\r\n    primer_entrenamiento = None\r\n    if entrenamientos.exists():\r\n        primer_entrenamiento = entrenamientos.first()\r\n\r\n    return render(request, 'equipo.html', {'equipo': equipo, 'partidos_anteriores':partidos_anteriores[:3], 'jugadores': jugadores, 'partidos_futuros': partidos_futuros[1:4],'clasificacion': clasificacion,'siguiente_partido': partidos_futuros[0], 'lat': lat, 'lon': lon,'equipos_entrenador': equipos, 'entrenamiento': primer_entrenamiento,'modo_equipo':True})\r\n\r\n\r\ndef equipos_entrenador(request):\r\n    usuario = request.user\r\n    equipos = Equipo.objects.filter(entrenadores__usuario_id=usuario.id)\r\n    return equipos\r\n\r\ndef obtener_jugadores_por_partido(request):\r\n    if request.method == 'GET' and 'partido_id' in request.GET:\r\n        partido_id = request.GET['partido_id']\r\n        partido = Partido.objects.get(pk=partido_id)\r\n        jugadores_equipo1 = Jugador.objects.filter(equipo=partido.equipo1)\r\n        jugadores_equipo2 = Jugador.objects.filter(equipo=partido.equipo2)\r\n        jugadores = list(jugadores_equipo1) + list(jugadores_equipo2)\r\n        jugadores_data = [{'id': jugador.id, 'nombre': jugador.nombre} for jugador in jugadores]\r\n        return JsonResponse({'jugadores': jugadores_data})\r\n    else:\r\n        return JsonResponse({'error': 'Se requiere el ID del partido'})\r\n\r\ndef producto(request, id):\r\n    producto = Producto.objects.get(id=id)\r\n    tallas = ProductoTalla.objects.filter(producto_id=id).order_by('talla')\r\n    if request.method == 'POST':\r\n\r\n        producto_talla = ProductoTalla.objects.get(producto_id=id, talla=request.POST.get('tallas'))\r\n\r\n        carro = {}\r\n\r\n        # Comprobar si hay ya un carrito en sesión\r\n        if \"carro\" in request.session:\r\n            carro = request.session.get(\"carro\", {})\r\n\r\n        # Comprobar que el producto está o no está en el carrito\r\n        if str(producto_talla.id) in carro.keys():\r\n            carro[str(producto_talla.id)] = int(carro[str(producto_talla.id)]) + int(request.POST.get('cantidad'))\r\n        else:\r\n            carro[str(producto_talla.id)] = int(request.POST.get('cantidad'))\r\n        request.session[\"carro\"] = carro\r\n\r\n        return redirect('tienda')\r\n    return render(request, 'producto.html', {'producto': producto, 'tallas': tallas})\r\n\r\ndef estadisticas_equipo(request, id):\r\n    equipo = Equipo.objects.get(id=id)\r\n    jugadores = Jugador.objects.filter(equipo_id=equipo.id)\r\n    estadisticas_jugadores = []\r\n\r\n    for jugador in jugadores:\r\n        estadisticas = EstadisticasJugador.objects.filter(jugador=jugador).aggregate(\r\n            total_puntos=Sum('puntos',default=0),\r\n            total_minutos= Sum('minutos',default=0),\r\n            total_rebotes = Sum('rebotes',default=0),\r\n            total_asistencias =Sum('asistencias',default=0),\r\n            total_faltas = Sum('faltas',default=0)\r\n        )\r\n        estadisticas_jugadores.append({\r\n            'jugador': jugador,\r\n            'estadisticas': estadisticas\r\n        })\r\n\r\n        usuario = request.user\r\n        data = {}\r\n        envio_datos_barra(data,request,usuario)\r\n\r\n    return render(request, 'lista_estadisticas_equipo.html', {'equipo': equipo, 'estadisticas_jugadores': estadisticas_jugadores, 'data': data})\r\n\r\n\r\n# def add_carrito(request):\r\n\r\ndef anyadir_carrito(request, id):\r\n    carro = request.session.get('carro', {})\r\n    carro[str(id)] = carro.get(str(id), 0) + 1\r\n    request.session[\"carro\"] = carro\r\n\r\n    totalItems = sum(carro.values())\r\n    totalPrice = sum(ProductoTalla.objects.get(id=producto_id).producto.precio * quantity for producto_id, quantity in carro.items())\r\n    productQuantities = {str(product_id): quantity for product_id, quantity in carro.items()}\r\n\r\n    # Devolver una respuesta JSON\r\n    return JsonResponse({'totalItems': totalItems, 'totalPrice': totalPrice, 'productQuantities': productQuantities})\r\n\r\ndef restar_carrito(request, id):\r\n    carro = request.session.get('carro', {})\r\n    if str(id) in carro:\r\n        carro[str(id)] -= 1\r\n        if carro[str(id)] <= 0:\r\n            del carro[str(id)]\r\n    request.session[\"carro\"] = carro\r\n\r\n    # Calcular el total de items y el precio total\r\n    totalItems = sum(carro.values())\r\n    totalPrice = sum(ProductoTalla.objects.get(id=producto_id).producto.precio * cantidad for producto_id, cantidad in carro.items())\r\n\r\n    # Crear un diccionario que mapee cada ID de producto a su cantidad\r\n    productQuantities = {str(product_id): quantity for product_id, quantity in carro.items()}\r\n\r\n    # Devolver una respuesta JSON\r\n    return JsonResponse({'totalItems': totalItems, 'totalPrice': totalPrice, 'productQuantities': productQuantities})\r\n\r\ndef eliminar_carrito(request, id):\r\n    carro = request.session.get('carro', {})\r\n    if str(id) in carro:\r\n        del carro[str(id)]\r\n    request.session[\"carro\"] = carro\r\n\r\n    # Calcular el total de items y el precio total\r\n    totalItems = sum(carro.values())\r\n    totalPrice = sum(ProductoTalla.objects.get(id=producto_id).producto.precio * quantity for producto_id, quantity in carro.items())\r\n\r\n    # Crear un diccionario que mapee cada ID de producto a su cantidad\r\n    productQuantities = {str(product_id): quantity for product_id, quantity in carro.items()}\r\n\r\n    # Devolver una respuesta JSON\r\n    return JsonResponse({'totalItems': totalItems, 'totalPrice': totalPrice, 'productQuantities': productQuantities})\r\n\r\ndef carrito(request):\r\n    cantProductos, carro, total = info_carrito(request)\r\n\r\n    if request.headers.get('x-requested-with') == 'XMLHttpRequest':\r\n        return JsonResponse({'cantProductos': cantProductos})\r\n\r\n    return render(request, 'carrito.html', {'carro': carro, 'total': total, 'cantProductos': cantProductos})\r\n\r\n\r\ndef info_carrito(request):\r\n    carro = {}\r\n    carro_cliente = {}\r\n    total = 0.0\r\n    cantProductos = 0\r\n\r\n    if 'carro' in request.session:\r\n        carro_cliente = request.session.get('carro', {})\r\n\r\n    for key in carro_cliente.keys():\r\n        producto = ProductoTalla.objects.get(id=key)\r\n        cantidad = carro_cliente[key]\r\n        carro[producto] = cantidad\r\n        total += cantidad * producto.producto.precio\r\n        cantProductos += cantidad  # Suma la cantidad de cada producto\r\n    return cantProductos, carro, total\r\n\r\ndef formulario_pago_pedido(request):\r\n    usuario= request.user\r\n    cantProductos, carro, total = info_carrito(request)\r\n    descuento, total_descuento = filtro_descuento(total,usuario)\r\n    if request.method == 'GET':\r\n        return render(request, 'formulario_pago.html', {'total': total, 'cantProductos': cantProductos, 'carro': carro, 'total_descuento': total_descuento,'descuento': descuento})\r\n    else:\r\n        crear_pedido(request)\r\n        request.session.pop('carro')\r\n        return redirect('tienda')\r\n\r\ndef filtro_descuento(total, usuario):\r\n    descuento = \"\"\r\n    if usuario.rol == \"Tutor\":\r\n        tutor = TutorLegal.objects.get(usuario=usuario)\r\n        if tutor.tarifa == 'PREMIUM':\r\n            total_descuento = total * 0.90\r\n            descuento = \"10%\"\r\n        else:\r\n            total_descuento = total * 0.95\r\n            descuento = \"5%\"\r\n    else:\r\n        total_descuento = total\r\n    return descuento, total_descuento\r\n\r\n\r\ndef crear_pedido(request):\r\n    usuario = request.user\r\n    cantProductos, carro, total = info_carrito(request)\r\n    descuento, total_descuento = filtro_descuento(total, usuario)\r\n    carro_cliente = request.session.get('carro', {})\r\n\r\n    nuevo_pedido = Pedido()\r\n    nuevo_pedido.fecha = datetime.now()\r\n    nuevo_pedido.usuario = User.objects.get(id=usuario.id)\r\n    nuevo_pedido.numPedido = int(str(usuario.id)+ str(nuevo_pedido.fecha.year) + str(nuevo_pedido.fecha.month) + str(nuevo_pedido.fecha.day))\r\n    nuevo_pedido.direccion = \"C/ \" + request.POST.get('direccion') + \", \" + request.POST.get('codigoPostal') + \", \" + request.POST.get('provincia')\r\n    nuevo_pedido.total = total_descuento\r\n    nuevo_pedido.save()\r\n\r\n    for k in carro_cliente.keys():\r\n        productoTalla = ProductoTalla.objects.get(id=int(k))\r\n        nueva_linea_pedido = LineaPedido()\r\n        nueva_linea_pedido.pedido = Pedido.objects.get(id=nuevo_pedido.id)\r\n        nueva_linea_pedido.prductoTalla = productoTalla\r\n        nueva_linea_pedido.cantidad = carro_cliente[k]\r\n        productoTalla.stock = productoTalla.stock - carro_cliente[k]\r\n        productoTalla.save()\r\n        nueva_linea_pedido.save()\r\n\r\ndef eliminar_pedido(request, id):\r\n    pedido = Pedido.objects.get(id=id)\r\n    pedido.delete()\r\n    return redirect('tienda')\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ClubBarrioApp/views.py b/ClubBarrioApp/views.py
--- a/ClubBarrioApp/views.py	(revision 6feaed5578a3a18e57423336c36ab1daaa97ec0a)
+++ b/ClubBarrioApp/views.py	(date 1715798749223)
@@ -537,6 +537,7 @@
             entrenador.nombre = request.POST.get('nombre')
             entrenador.apellidos = request.POST.get('apellidos')
             entrenador.save()
+            entrenador.equipo_set.clear()
             list_equipos = request.POST.getlist('equipos')
             for e in list_equipos:
                 equipo = Equipo.objects.get(id=e)
Index: templates/editar_usuarios.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Editar usuario</title>\r\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n    \r\n    <style>\r\n        #equipoSelect, #tutorSelect, #entrenadorSelect, #nombreField, #apellidosField {\r\n            display: none;\r\n        }\r\n\r\n    </style>\r\n    \r\n</head>\r\n\r\n\r\n{% include \"barra_admin.html\" %}\r\n\r\n<body>\r\n\r\n<div class=\"container\">\r\n\r\n\r\n    <h1 class=\"my-4\">Edita usuario</h1>\r\n\r\n        {% if errores %}\r\n        <div class=\"alert alert-danger\">\r\n            <ul>\r\n                {% for error in errores %}\r\n                    <li>{{ error }}</li>\r\n                {% endfor %}\r\n            </ul>\r\n        </div>\r\n        {% endif %}\r\n\r\n    <form action=\"\" method=\"post\">\r\n\r\n        {% csrf_token %}\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n                <label for=\"rol\" class=\"form-label\">Rol:</label>\r\n                <input type=\"text\" name=\"rol\" id=\"rol\" class=\"form-control\" value=\"{{ usuario.rol }}\" disabled>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n                <label for=\"username\" class=\"form-label\">Username:</label>\r\n                <input type=\"text\" name=\"username\" maxlength=\"20\" id=\"username\" class=\"form-control\" value=\"{{ usuario.username }}\" required>\r\n            </div>\r\n            <div class=\"col-md-4\" id=\"nombreField\">\r\n                <label for=\"nombre\" class=\"form-label\">Nombre:</label>\r\n                <input type=\"text\" name=\"nombre\" maxlength=\"20\" id=\"nombre\" class=\"form-control\" value=\"{{ datos.nombre }}\">\r\n            </div>\r\n            <div class=\"col-md-4\" id=\"apellidosField\">\r\n                <label for=\"apellidos\" class=\"form-label\">Apellidos:</label>\r\n                <input type=\"text\" name=\"apellidos\" maxlength=\"50\" id=\"apellidos\" class=\"form-control\" value=\"{{ datos.apellidos }}\">\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n                <label for=\"email\" class=\"form-label\">Email:</label>\r\n                <input type=\"email\" name=\"email\" id=\"email\" maxlength=\"30\" class=\"form-control\" value=\"{{ usuario.email }}\" required>\r\n            </div>\r\n            \r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n                <label for=\"fecha_nacimiento\" class=\"form-label\">Fecha de nacimiento:</label>\r\n                <input type=\"date\" name=\"fecha_nacimiento\" id=\"fecha_nacimiento\" class=\"form-control\" value=\"{{ usuario.fecha_nacimiento|date:'Y-m-d' }}\" required>\r\n            </div>\r\n            <div class=\"col-md-6 select\" id=\"tarifaSelect\">\r\n                <label for=\"tarifa\" class=\"form-label\">Tarifa:</label>\r\n                <select name=\"tarifa\" id=\"tarifa\" class=\"form-select\">\r\n                {% for t in tarifas %}\r\n                    {% if t|upper == datos.tarifa|upper %}\r\n                        <option value=\"{{ t }}\" selected>{{ t }}</option>\r\n                    {% else %}\r\n                        <option value=\"{{ t }}\">{{ t }}</option>\r\n                    {% endif %}\r\n\r\n                {% endfor %}\r\n            </select>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-md-6 select\" id=\"equipoSelect\">\r\n                <label for=\"equipo\" class=\"form-label\">Equipo:</label>\r\n                <select id=\"equipo\" name=\"equipo\" class=\"form-select\">\r\n                    {% for e in Equipos %}\r\n                        {% if e.id == equipo.id  %}\r\n                                    <option value=\"{{ e.id }}\" selected>{{ e.nombre }}</option>\r\n                        {% else  %}\r\n                            <option value=\"{{ e.id }}\">{{ e.nombre }}</option>\r\n                        {% endif %}\r\n                    {% endfor %}\r\n                </select>\r\n            </div>\r\n\r\n            <div class=\"col-md-6 select\" id=\"tutorSelect\">\r\n                <label for=\"tutor\" class=\"form-label\">Tutor:</label>\r\n                <select id=\"tutores\" name=\"tutor\" class=\"form-select\">\r\n                    {% for t in Tutores %}\r\n                        {% if t.id == tutor.id %}\r\n                            <option value=\"{{ t.id }}\" selected>{{ t.nombre }}</option>\r\n                        {% else  %}\r\n                            <option value=\"{{ t.id }}\">{{ t.nombre }} {{ t.apellidos }}</option>\r\n                        {% endif %}\r\n                    {% endfor %}\r\n                </select>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-12\" id=\"checkbox-activo\">\r\n                <label for=\"is_active\" class=\"form-label\" style=\"margin: 0\"> Es Activo:</label>\r\n                <input type=\"checkbox\" name=\"is_active\" id=\"is_active\" {% if datos.es_activo %} checked {% endif %}>\r\n            </div>\r\n        </div>\r\n        \r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-12 text-center\">\r\n                <button type=\"submit\" class=\"btn btn-primary mt-3\">Submit</button>\r\n            </div>\r\n        </div>\r\n\r\n    </form>\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-12 text-center\">\r\n            <a href=\"{% url 'administrador' %}\" role=\"button\" class=\"btn btn-secondary mt-3\">Volver</a>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n    <script>\r\n$(document).ready(function() {\r\n    var roleActions = {\r\n        'Usuario': function() {\r\n            $('#equipoSelect, #tutorSelect, #entrenadorSelect, #nombreField, #apellidosField, #checkbox-activo,#tarifaSelect').hide();\r\n            $('#nombre, #apellidos').removeAttr('required');\r\n        },\r\n        'Entrenador': function() {\r\n            $('#entrenadorSelect, #tutorSelect, #checkbox-activo,#tarifaSelect').hide();\r\n            $('#equipoSelect, #nombreField, #apellidosField').show();\r\n            $('#nombre, #apellidos').attr('required', true);\r\n        },\r\n        'Jugador': function() {\r\n            $('#entrenadorSelect,#tarifaSelect').hide();\r\n            $('#equipoSelect, #tutorSelect, #nombreField, #apellidosField, #checkbox-activo').show();\r\n            $('#nombre, #apellidos').attr('required', true);\r\n        },\r\n        'Tutor': function() {\r\n            $('#equipoSelect, #tutorSelect, #entrenadorSelect').hide();\r\n            $('#nombreField, #apellidosField, #checkbox-activo,#tarifaSelect').show();\r\n            $('#nombre, #apellidos').attr('required', true);\r\n        },\r\n        'Administrador': function() {\r\n            $('#equipoSelect, #tutorSelect, #entrenadorSelect, #nombreField, #apellidosField, #checkbox-activo,#tarifaSelect').hide();\r\n            $('#nombre, #apellidos').removeAttr('required');\r\n        }\r\n    };\r\n\r\n    $('#rol').on('input', function() {\r\n        var selectedRol = $(this).val();\r\n        if (roleActions[selectedRol]) {\r\n            roleActions[selectedRol]();\r\n        }\r\n    });\r\n\r\n    // Ejecutar la función correspondiente al cargar la página\r\n    var initialRol = $('#rol').val();\r\n    if (roleActions[initialRol]) {\r\n        roleActions[initialRol]();\r\n    }\r\n});\r\n</script>\r\n\r\n</body>\r\n\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/editar_usuarios.html b/templates/editar_usuarios.html
--- a/templates/editar_usuarios.html	(revision 6feaed5578a3a18e57423336c36ab1daaa97ec0a)
+++ b/templates/editar_usuarios.html	(date 1715798161831)
@@ -124,6 +124,16 @@
                 <label for="is_active" class="form-label" style="margin: 0"> Es Activo:</label>
                 <input type="checkbox" name="is_active" id="is_active" {% if datos.es_activo %} checked {% endif %}>
             </div>
+            <div class="row">
+                <div class="col-md-6 select" id="equiposSelect">
+                    <label for="equipos" class="form-label">Equipos:</label>
+                    <select id="equipos" name="equipos" class="form-select" multiple>
+                        {% for e in Equipos %}
+                            <option value="{{ e.id }}">{{ e.nombre }}</option>
+                        {% endfor %}
+                    </select>
+                </div>
+            </div>
         </div>
         
 
@@ -150,8 +160,8 @@
             $('#nombre, #apellidos').removeAttr('required');
         },
         'Entrenador': function() {
-            $('#entrenadorSelect, #tutorSelect, #checkbox-activo,#tarifaSelect').hide();
-            $('#equipoSelect, #nombreField, #apellidosField').show();
+            $('#entrenadorSelect, #tutorSelect, #checkbox-activo,#tarifaSelect,#equipoSelect').hide();
+            $('#equiposSelect, #nombreField, #apellidosField').show();
             $('#nombre, #apellidos').attr('required', true);
         },
         'Jugador': function() {
